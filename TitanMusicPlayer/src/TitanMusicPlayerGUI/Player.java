/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package TitanMusicPlayerGUI;

import TitanMusicPlayer.bll.*;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.farng.mp3.MP3File;
import org.farng.mp3.TagException;

/**
 *
 * @author AJ Green <ajgreenmail@gmail.com>
 */
public class Player extends javax.swing.JFrame {
    Library playerLibrary = new Library();
    Playlist currentList = new Playlist();
    public Account account = new Account();
    private String currentAccount = account.getUsername();
    MP3Player myPlayer = null;
    
    
    public static String musicPath = System.getProperty("user.home") + 
            "\\Music";
    public static String[] defaultList = {"<No items yet>"};
    
    //Song-status values
    private final int SONG_PLAYING = 10;
    private final int SONG_STOPPED = 20;
    private final int SONG_PAUSED = 30;
    private int songStatus = SONG_STOPPED;

    /**
     * Creates new form Library
     */
    public Player() {
        initComponents();
        firstRun();
        populateSongLists();
        populatePlaylist();
        currentPLLable.setText(currentList.getPLName());
        populatePLList();
        
        //Populate title and artist lists with data
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        titleRadioButton = new javax.swing.JRadioButton();
        artistRadioButton = new javax.swing.JRadioButton();
        artistLabel = new javax.swing.JLabel();
        currentPLLable = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        playPLButton = new javax.swing.JButton();
        playSongButton = new javax.swing.JButton();
        delSongButton = new javax.swing.JButton();
        addToPLButton = new javax.swing.JButton();
        addSongLibButton = new javax.swing.JButton();
        playlistsLabel = new javax.swing.JLabel();
        libControlLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        PLControlLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        artistList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        playlistsList = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        currentPLList = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        titlesList = new javax.swing.JList();
        newPLButton = new javax.swing.JButton();
        delPLButton = new javax.swing.JButton();
        renamePLButton = new javax.swing.JButton();
        remSongPLButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        stopButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        songInfoField = new javax.swing.JTextField();
        timeField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenu();
        newSongMenuItem = new javax.swing.JMenuItem();
        newPlaylistMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        userMenu = new javax.swing.JMenu();
        createUserMenuItem = new javax.swing.JMenuItem();
        loginMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Titan Music Player");

        titleLabel.setText("Title");

        sortButtonGroup.add(titleRadioButton);
        titleRadioButton.setSelected(true);
        titleRadioButton.setText("Sort By");
        titleRadioButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        titleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleRadioButtonActionPerformed(evt);
            }
        });

        sortButtonGroup.add(artistRadioButton);
        artistRadioButton.setText("Sort By");
        artistRadioButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        artistRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistRadioButtonActionPerformed(evt);
            }
        });

        artistLabel.setText("Artist");

        currentPLLable.setText("New Playlist");

        playPLButton.setText("Play Playlist");
        playPLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPLButtonActionPerformed(evt);
            }
        });

        playSongButton.setText("Play Song");
        playSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSongButtonActionPerformed(evt);
            }
        });

        delSongButton.setText("Delete Song");
        delSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delSongButtonActionPerformed(evt);
            }
        });

        addToPLButton.setText("Add to Playlist");
        addToPLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToPLButtonActionPerformed(evt);
            }
        });

        addSongLibButton.setText("Add Song");
        addSongLibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongLibButtonActionPerformed(evt);
            }
        });

        playlistsLabel.setText("Playlists");

        libControlLabel.setText("Library Controls");

        PLControlLabel.setText("Playlist Controls");

        artistList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        artistList.setEnabled(false);
        artistList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                artistListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(artistList);

        playlistsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        playlistsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(playlistsList);

        currentPLList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentPLList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane7.setViewportView(currentPLList);

        titlesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        titlesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                titlesListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(titlesList);

        newPLButton.setText("New Playlist");
        newPLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPLButtonActionPerformed(evt);
            }
        });

        delPLButton.setText("Delete Playlist");

        renamePLButton.setText("Rename Playlist");
        renamePLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renamePLButtonActionPerformed(evt);
            }
        });

        remSongPLButton.setText("Remove Song");
        remSongPLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remSongPLButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause | |");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        prevButton.setText("<< Prev");

        playButton.setText("Play >");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next >>");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        songInfoField.setEditable(false);
        songInfoField.setText("Song Name - Artist Name");
        songInfoField.setFocusable(false);
        songInfoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songInfoFieldActionPerformed(evt);
            }
        });

        timeField.setEditable(false);
        timeField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        timeField.setText("Current Time - Time Remaing");
        timeField.setFocusable(false);
        timeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeFieldActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        newMenu.setText("New >");

        newSongMenuItem.setText("Song to Library");
        newSongMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSongMenuItemActionPerformed(evt);
            }
        });
        newMenu.add(newSongMenuItem);

        newPlaylistMenuItem.setText("Playlist");
        newMenu.add(newPlaylistMenuItem);

        fileMenu.add(newMenu);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        userMenu.setText("User");

        createUserMenuItem.setText("Create User");
        createUserMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(createUserMenuItem);

        loginMenuItem.setText("Login");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(loginMenuItem);

        menuBar.add(userMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addSongLibButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delSongButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playSongButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addToPLButton))
                            .addComponent(libControlLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playPLButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPLButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delPLButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(renamePLButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remSongPLButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(titleLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(titleRadioButton)
                                        .addGap(63, 63, 63)
                                        .addComponent(artistLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(artistRadioButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(currentPLLable))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playlistsLabel)))
                            .addComponent(PLControlLabel))
                        .addGap(15, 15, 15))))
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prevButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(songInfoField, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addSongLibButton, addToPLButton, delSongButton, playSongButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {delPLButton, newPLButton, playPLButton, remSongPLButton, renamePLButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nextButton, pauseButton, playButton, prevButton, stopButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, jScrollPane8});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(titleLabel)
                            .addComponent(titleRadioButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(artistRadioButton)
                            .addComponent(artistLabel)
                            .addComponent(currentPLLable)))
                    .addComponent(playlistsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(libControlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSongLibButton)
                    .addComponent(delSongButton)
                    .addComponent(playSongButton)
                    .addComponent(addToPLButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(PLControlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playPLButton)
                    .addComponent(newPLButton)
                    .addComponent(delPLButton)
                    .addComponent(renamePLButton)
                    .addComponent(remSongPLButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton)
                    .addComponent(playButton)
                    .addComponent(pauseButton)
                    .addComponent(stopButton)
                    .addComponent(nextButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songInfoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /*
    firstRun loads data from the library and other basic startup fucntions
    */
    public void firstRun() {
        playerLibrary.getLibrary();
    }
    
    //Gets selected song from titlesList
    public Song getSelectedSong(){
        return playerLibrary.getSongByIndex(titlesList.getSelectedIndex());
    }
    
    /*
    Generic method to repopulate Title and Artist lists at start or during
    list rebuild. 
    */
    public void populateSongLists()
    {
        if(!playerLibrary.isEmpty()) {
            titlesList.setListData(playerLibrary.getAllTitles().toArray());
            artistList.setListData(playerLibrary.getAllArtists().toArray());
        }
        else {
            titlesList.setListData(defaultList);
            artistList.setListData(defaultList);
        }
    }
    
    public void populatePlaylist()
    {
        if(!currentList.isEmpty()){
            //Array for song titles
            ArrayList<String> songs = new ArrayList();
            for(Song s : currentList.getPlaylist())
            {
                songs.add(s.getTitle());
            }
            currentPLList.setListData(songs.toArray());
        }
        else {
            currentPLList.setListData(defaultList);
        }
    }
    
    public void populatePLList()
    {
        //Need to create playlists table?????
        playlistsList.setListData(defaultList);
    }
    
    public void newSongToLibrary()
    {
        Song newSong;          //Create new song object
        //Basic song info
        String artist = "";
        String title = "";
        String path = "";
        
        //JChooser for new song file
        JFileChooser fileChooser = new JFileChooser(musicPath);
        //Filter, accept only MP3
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "MP3 Files", "mp3");
        fileChooser.setFileFilter(filter);
        //Open dialog
        int status = fileChooser.showOpenDialog(null);
        //If file selected, load information
        if (status == JFileChooser.APPROVE_OPTION)
        {
            //Create new file
            File selectedFile = fileChooser.getSelectedFile();
            path = selectedFile.getPath();
            
            //Try to load file as MP3, should never fail
            try {
                MP3File mp3File = new MP3File(selectedFile);
                //Get info from file
                title = mp3File.getID3v1Tag().getSongTitle();
                artist = mp3File.getID3v1Tag().getArtist();
                
            } catch (IOException ex) {
                Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TagException ex) {
                Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if(artist == "") {
                    artist = "Unknown Artist";
                }
                if(title == "") {
                    title = "Unknown Title";
                }
            }
            //Create Song object
            newSong = new Song(title, artist, path);
            //Add to playerLibrary
            playerLibrary.addToLibrary(newSong);
            //DATABASE CALL TO ADD TO LIBRARY????
            
            populateSongLists();
        }
    }
    
    private void titleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleRadioButtonActionPerformed
        //Sort by title when button selected
        playerLibrary.sortByTitle();
        populateSongLists();
    }//GEN-LAST:event_titleRadioButtonActionPerformed

    private void artistRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistRadioButtonActionPerformed
        // Sort by artist when button selected
        playerLibrary.sortByArtist();
        populateSongLists();
    }//GEN-LAST:event_artistRadioButtonActionPerformed

    private void addToPLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToPLButtonActionPerformed
        //Get selected songs
        int[] songs = titlesList.getSelectedIndices();
        
        //Add each song by index to playlist
        for(int i : songs){
            currentList.addSongToPlaylist(playerLibrary.getSongByIndex(i));
        }
        
        populatePlaylist();
            
    }//GEN-LAST:event_addToPLButtonActionPerformed

    private void songInfoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songInfoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_songInfoFieldActionPerformed

    private void timeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeFieldActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        //Next button pressed (Skips song)
        currentList.songSkip();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void addSongLibButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongLibButtonActionPerformed
        newSongToLibrary();
    }//GEN-LAST:event_addSongLibButtonActionPerformed

    private void newSongMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSongMenuItemActionPerformed
        newSongToLibrary();
    }//GEN-LAST:event_newSongMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void delSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delSongButtonActionPerformed
        //Retrieve Selected songs
        int[] songsIndex = titlesList.getSelectedIndices();
        
        for(int i: songsIndex)
        {
            playerLibrary.removeFromLibrary(i);
        }
        
        populateSongLists();
    }//GEN-LAST:event_delSongButtonActionPerformed

    private void titlesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_titlesListValueChanged
        //On each selection, highlight the corresponding Artist
        //libraryListSelection();
        artistList.setSelectedIndices(titlesList.getSelectedIndices());
    }//GEN-LAST:event_titlesListValueChanged

    private void artistListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_artistListValueChanged
       //libraryListSelection();
    }//GEN-LAST:event_artistListValueChanged

    private void playSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSongButtonActionPerformed
        playSong();
    }//GEN-LAST:event_playSongButtonActionPerformed

    private void playPLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPLButtonActionPerformed
        //Code to instantiate player. Will need to load list.
    }//GEN-LAST:event_playPLButtonActionPerformed

    private void newPLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPLButtonActionPerformed
        //Confirm new playlist
        int result = JOptionPane.showConfirmDialog(null, "Create new playlist? "
                + "Previous unsaved list will be lost.", "Create New List", 
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        //If user selects OK, create playlist
        if(result == JOptionPane.OK_OPTION)
        {
            //Input for new name
            String name = JOptionPane.showInputDialog("Please enter playlist"
                    + "name:", "PL " + DateFormat.getDateInstance().format
                    (new Date()));
            //New Current
            currentList = new Playlist(name);
            
            //Show list changes
            populatePlaylist();
            currentPLLable.setText(currentList.getPLName());
        }
    }//GEN-LAST:event_newPLButtonActionPerformed

    private void renamePLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renamePLButtonActionPerformed
        String name = JOptionPane.showInputDialog("Rename playlist:", "PL " + 
                DateFormat.getDateInstance().format(new Date()));
        currentList.setPLName(name);
        
        currentPLLable.setText(currentList.getPLName());
    }//GEN-LAST:event_renamePLButtonActionPerformed

    private void remSongPLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remSongPLButtonActionPerformed
        //Get selected songs from Current Playlist
        int[] songs = currentPLList.getSelectedIndices();
        
        //Use indices array to remove from currentList
        for(int i : songs){
            currentList.removeSongFromPlaylist(i);
        }
        
        populatePlaylist();
        
        ///^^^^Need to work on remove from database also. Thinking: get songid
        ///and search in songs db. Also, will need to search conjoined db once
        ///implemented.
    }//GEN-LAST:event_remSongPLButtonActionPerformed

    private void createUserMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserMenuItemActionPerformed
        //Run create account form
        new CreateAccount(account).setVisible(true);
        //Cannot stop code from execution to update user?
    }//GEN-LAST:event_createUserMenuItemActionPerformed

    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        //Run Login form
        new AccountLogin(account).setVisible(true);
    }//GEN-LAST:event_loginMenuItemActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        playSong();
    }//GEN-LAST:event_playButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        pauseSong();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopSong();
    }//GEN-LAST:event_stopButtonActionPerformed

    //Want to use this to update user, but will not work?
    private void updateAccount(){
        this.setTitle("Titan Music Player - Logged in as " + account.getUsername());
        JOptionPane.showMessageDialog(null, account.getUsername());
    }
    
    //Multi-use playSong method
    private void playSong(){
        if(songStatus == SONG_STOPPED){
            Song selectedSong = playerLibrary.getSongByIndex(titlesList.getSelectedIndex());
            myPlayer = new MP3Player(selectedSong);
            new Thread(myPlayer).start();
            songStatus = SONG_PLAYING;
            songInfoField.setText(selectedSong.getTitle() + " - " + selectedSong.getArtist());
        }
        else if(songStatus == SONG_PAUSED){
           myPlayer.resumePlay();
           songStatus = SONG_PLAYING;
        }
    }
    
    //Multi-use pauseSong method
    private void pauseSong(){
        if(songStatus == SONG_PLAYING){
            myPlayer.pause();
            songStatus = SONG_PAUSED;
        }
    }
    
    //Multi-use stopSong method
    private void stopSong(){
        if(songStatus == SONG_PLAYING || songStatus == SONG_PAUSED){
            myPlayer.stopPlay();
            songStatus = SONG_STOPPED;
        }
    }
    
    /**
    //Compares and selects library lists to keep selections the same
    public void libraryListSelection()
    {
        int flag;           //flag for selection difference
        
        flag = titlesList.getSelectedIndices().toString().compareTo(
            
    /**    artistList.getSelectedIndices().toString());
        
        JOptionPane.showMessageDialog(null, flag);
    }
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Player().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PLControlLabel;
    private javax.swing.JButton addSongLibButton;
    private javax.swing.JButton addToPLButton;
    private javax.swing.JLabel artistLabel;
    private javax.swing.JList artistList;
    private javax.swing.JRadioButton artistRadioButton;
    private javax.swing.JMenuItem createUserMenuItem;
    private javax.swing.JLabel currentPLLable;
    private javax.swing.JList currentPLList;
    private javax.swing.JButton delPLButton;
    private javax.swing.JButton delSongButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel libControlLabel;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu newMenu;
    private javax.swing.JButton newPLButton;
    private javax.swing.JMenuItem newPlaylistMenuItem;
    private javax.swing.JMenuItem newSongMenuItem;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton playPLButton;
    private javax.swing.JButton playSongButton;
    private javax.swing.JLabel playlistsLabel;
    private javax.swing.JList playlistsList;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton remSongPLButton;
    private javax.swing.JButton renamePLButton;
    private javax.swing.JTextField songInfoField;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField timeField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JRadioButton titleRadioButton;
    private javax.swing.JList titlesList;
    private javax.swing.JMenu userMenu;
    // End of variables declaration//GEN-END:variables
}
